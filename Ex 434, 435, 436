#Ex 4.3.4
#Your task is to rite and test a function which takes one argument (a year) and returns True if the year is a leap year, 
#or False otherwise.

##The seed of the function is already sown in the skeleton code in the editor.

#Note: we've also prepared a short testing code, which you can use to test your function.

#The code uses two lists ‒ one with the test data, and the other containing the expected results. The code will tell you if any of your results are invalid.



def is_year_leap(year): # creates the function
   if year < 1582:
        return None
    
    
   if year % 4 != 0:
        return False

   elif year % 100 != 0:
        #is a leap year
        return True
   elif year % 400 != 0:
        #is a common year
        return False
   else:
        # is a leap year
        return True
   
   ######################---------------------------######################

#Ex 4.3.5
#Your task is to write and test a function which takes two arguments (a year and a month) and returns the number of 
# days for the given year-month pair (while only February is sensitive to the year value, your function should be universal).

#The initial part of the function is ready. Now, convince the function to return None if its arguments don't make sense.

#Of course, you can (and should) use the previously written and tested function (LAB 4.3.1.6). It may be very helpful. We encourage you to use a list filled with the months' lengths. You can create it inside the function ‒ this trick will significantly shorten the code.

def days_in_month(year, month):
    # Determine the number of days in a month
    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    res = days[month - 1] # As the range starts from zero, the chosen month is one behind
    
    # Adjust for February if it's a leap year
    if month == 2 and is_year_leap(year):
        res = 29
    return res
   
######################---------------------------######################
#Ex 4.3.6
#Your task is to write and test a function which takes three arguments (a year, a month, and a day of the month) 
# and returns the corresponding day of the year, or returns None if any of the arguments is invalid.
#Use the previously written and tested functions. Add your own test cases to the code.



def day_of_year(year, month, day):
    if year < 1 or month < 1 or month > 12 or day < 1:
        return None
    days = 0 # variable to keep track of days
    for m in range(1, month): #for loop to iterate from first month to current 
        days_so_far = days_in_month(year, m) # for each month its calculates the number of days in that month using "days in month function"
        if days_so_far == 0:
            return None  # Invalid month
        days += days_so_far # is the sum of days and days_so_far
    if day <= days_in_month(year, month):
        return days + day
    else:
        return None

test_years = [1900, 2000, 2016, 1987]
test_months = [2, 2, 1, 11]
test_days = [28, 29, 31, 30]

for i in range(len(test_years)):
    yr = test_years[i]
    mo = test_months[i]
    da = test_days[i]
    result = day_of_year(yr, mo, da)
    print(yr, mo, da, "->", result)
