#Scenario
#Your task here is even more special than before: you must redesign the (ugly) vowel eater from the previous lab and create a better, upgraded (pretty) vowel eater! Write a program that uses:

#a for loop;
#the concept of conditional execution (if-elif-else)
#the continue statement.
#Your program must:

#ask the user to enter a word;
#use user_word = user_word.upper() to convert the word entered by the user to upper case; we'll talk about string methods and the upper() method very soon - don't worry;
#use conditional execution and the continue statement to "eat" the following vowels A, E, I, O, U from the inputted word;
#assign the uneaten letters to the word_without_vowels variable and print the variable to the screen.
#Look at the code in the editor. We've created word_without_vowels and assigned an empty string to it. Use concatenation operation to ask Python to combine selected letters into a longer string during subsequent loop turns, and assign it to the word_without_vowels variable.

#Test your program with the data we've provided for you.

###############--------------############

user_word = (input("Enter word? "))

word_without_vowels= ""
vowels = "AEIOU"


for letter in user_word.upper(): #Looks for letter in the upper case variable
    
    if letter in vowels: #if "letter" matches any of the "vowels" in the variables vowels, disregard it "continue".
        continue

    else:
#The constanants are added to the "word_without_vowles" variables. To stop the "word_without_vowles" variable from being overwritten by the next constantant, we must append the variable. This is done by concatinating the 2 variables below

        word_without_vowels = word_without_vowels + letter
        
#By entering the constanants into the "word_without_vowles" variable this separates the visual output from functionality

print (word_without_vowels)
        #print (word_without_vowels)

###############--------------############
